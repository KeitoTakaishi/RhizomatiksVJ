#pragma kernel init
#pragma kernel update
#include "../../../ShaderUtils/Noise4d.cginc"
struct Params {
	float3 pos;
	float2 life;
};

RWStructuredBuffer<Params> parames;
float time;
float dt;

[numthreads(64,1,1)]
//void init (uint3 id : SV_DispatchThreadID)
void init(uint id : SV_DispatchThreadID)
{
	float2 life = parames[id].life;
	float3 p = parames[id].pos;
	/*
	if (life.x < 0.0) {
		float n = 128.0;
		float x = fmod( (float)(id), n);
		x = (x * 2.0 - n) / 2.0;
		float y = ((float)(id) / n);
		y = (y * 2.0 - n) / 2.0;
		p = float3(x, y, 0.0);
		//p = float3(0.0.xxx);
		life.x = life.y;
	}
	else {
		life.x -= dt;
		float scale = 0.2;
		p += curlNoise(float4(p.x*scale, p.y*scale, p.z*scale, time*0.1)) * 0.2 * exp(life.y - life.x);
	}
	*/
	
	
	parames[id].pos = p;
	parames[id].life = life;

}


[numthreads(64, 1, 1)]
void update(uint id : SV_DispatchThreadID)
{
	float2 life = parames[id].life;
	float3 p = parames[id].pos;
	if (life.x < 0.0) {
		float n = 128.0;
		float x = fmod((float)(id), n);
		x = (x * 2.0 - n) / 2.0;
		float y = ((float)(id) / n);
		y = (y * 2.0 - n) / 2.0;
		p = float3(x, y, 0.0);
		//p = float3(0.0.xxx);
		life.x = life.y;
	}
	else {
		life.x -= dt;
		float scale = 0.2;
		p += curlNoise(float4(p.x*scale, p.y*scale, p.z*scale, time*0.1)) * 0.2 * exp(life.y - life.x);
	}


	parames[id].pos = p;
	parames[id].life = life;
}