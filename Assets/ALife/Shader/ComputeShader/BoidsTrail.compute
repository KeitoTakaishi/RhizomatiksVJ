#pragma kernel init
#pragma kernel update
#define BLOCK_SIZE 32
#include "../Noise4d.cginc"

RWStructuredBuffer<float3> positionBuffer;
RWStructuredBuffer<float3> velocityBuffer;
float dt;
float time;

float _CohesionNeighborhoodRadius;
float _AlignmentNeighborhoodRadius;
float _SeparateNeighborhoodRadius;

float _MaxSpeed;
float _MaxSteerForce;

float _SeparateWeight;
float _AlignmentWeight;
float _CohesionWeight;

float4 _WallCenter;
float4 _WallSize;
float  _AvoidWallWeight;
int trailNum;

float3 limit(float3 vec, float max)
{
	float length = sqrt(dot(vec, vec));
	return (length > max && length > 0) ? vec.xyz * (max / length) : vec.xyz;
}

float3 avoidWall(float3 position)
{
	float3 wc = _WallCenter.xyz;
	float3 ws = _WallSize.xyz;
	float3 acc = float3(0, 0, 0);	
	acc.x = (position.x < wc.x - ws.x * 0.5) ? acc.x + 1.0 : acc.x;
	acc.x = (position.x > wc.x + ws.x * 0.5) ? acc.x - 1.0 : acc.x;

	acc.y = (position.y < wc.y - ws.y * 0.5) ? acc.y + 1.0 : acc.y;
	acc.y = (position.y > wc.y + ws.y * 0.5) ? acc.y - 1.0 : acc.y;


	acc.z = (position.z < wc.z - ws.z * 0.5) ? acc.z + 1.0 : acc.z;
	acc.z = (position.z > wc.z + ws.z * 0.5) ? acc.z - 1.0 : acc.z;

	return acc;
}

[numthreads(BLOCK_SIZE, 1, 1)]
void init(uint2 id : SV_DispatchThreadID)
{
	uint idx = id.x;

	float i = floor(idx.x / BLOCK_SIZE);
	positionBuffer[idx] =
		curlNoise(float4(i, i, i, i)) * 1.0;
	
	//positionBuffer[idx] = float3(0.0, 0.0, 0.0);
	//velocityBuffer[idx] = float3(0.0, 0.0, 0.0);

	velocityBuffer[idx] =
		curlNoise(float4(i, i, i, i)) * 0.1;
}



[numthreads(BLOCK_SIZE, 1, 1)]
void update(uint2 id : SV_DispatchThreadID)
{
	uint idx = id.x;
	if (fmod(idx, BLOCK_SIZE) == 0) {
		//top
		float3 pos = positionBuffer[idx];
		float3 vel = velocityBuffer[idx];
		float3 force = float3(0.0, 0.0, 0.0);
		
		
		float3 sepPosSum = float3(0, 0, 0);
		int sepCount = 0;

		float3 aliVelSum = float3(0, 0, 0);
		int aliCount = 0;

		float3 cohPosSum = float3(0, 0, 0);
		int cohCount = 0;

		
		//先頭と先頭の比較
		for (int i = 0; i < 256*BLOCK_SIZE; i += BLOCK_SIZE) {
			float3 npos = positionBuffer[i];
			float3 nvel = velocityBuffer[i];
			float3 diff = pos - npos;
			float dist = sqrt(dot(diff, diff));

			if (dist > 0.0 && dist <= _SeparateNeighborhoodRadius)
			{
				float3 repulse = normalize(pos - npos);
				repulse /= dist;
				sepPosSum += repulse;
				sepCount++;
			}

			if (dist > 0.0 && dist <= _AlignmentNeighborhoodRadius)
			{
				aliVelSum += nvel;
				aliCount++;
			}

			if (dist > 0.0 && dist <= _CohesionNeighborhoodRadius)
			{
				cohPosSum += npos;
				cohCount++;
			}
		}
		
		float3 sepSteer = (float3)0.0;
		if (sepCount > 0)
		{
			sepSteer = sepPosSum / (float)sepCount;
			sepSteer = normalize(sepSteer) * _MaxSpeed;
			sepSteer = sepSteer - vel;
			sepSteer = limit(sepSteer, _MaxSteerForce);
		}
		float3 aliSteer = (float3)0.0;
		if (aliCount > 0)
		{
			aliSteer = aliVelSum / (float)aliCount;
			aliSteer = normalize(aliSteer) * _MaxSpeed;
			aliSteer = aliSteer - vel;
			aliSteer = limit(aliSteer, _MaxSteerForce);
		}

		float3 cohSteer = (float3)0.0;
		if (cohCount > 0)
		{
			cohPosSum = cohPosSum / (float)cohCount;
			cohSteer = cohPosSum - pos;
			cohSteer = normalize(cohSteer) * _MaxSpeed;
			cohSteer = cohSteer - vel;
			cohSteer = limit(cohSteer, _MaxSteerForce);
		}
		force += aliSteer * _AlignmentWeight;
		force += cohSteer * _CohesionWeight;
		force += sepSteer * _SeparateWeight;
		force += avoidWall(pos) * _AvoidWallWeight;
		
		
		
		vel += force * dt;
		vel = limit(vel, _MaxSpeed);
		pos += vel * dt;
		
		velocityBuffer[idx] = vel;
		positionBuffer[idx] = pos;
		
		//positionBuffer[idx] = float3(0.0, 5.0, 0.0);

		
	}
	else {
		positionBuffer[idx] = positionBuffer[idx - 1];
		//velocityBuffer[idx] = velocityBuffer[idx - 1];

	}
}
